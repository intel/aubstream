#
# Copyright (C) 2022 Intel Corporation
#
# SPDX-License-Identifier: MIT
#

if(WIN32 AND NOT AUBSTREAM_ALLOW_LEGACY_PLATFORMS_SUPPORT)
  DISABLE_FLAGS_FOR("GEN8" "BDW")
  DISABLE_FLAGS_FOR("GEN9" "SKL" "KBL" "BXT" "GLK" "CFL")
  DISABLE_FLAGS_FOR("GEN11" "ICLLP")
else()
  SET_FLAGS_FOR("GEN8" "BDW")
  SET_FLAGS_FOR("GEN9" "SKL" "KBL" "BXT" "GLK" "CFL")
  SET_FLAGS_FOR("GEN11" "ICLLP")
endif()
SET_FLAGS_FOR("GEN12LP" "TGLLP" "ADLS" "ADLP" "DG1" "ADLN")
SET_FLAGS_FOR("XE_HPG_CORE" "DG2" "MTL")
SET_FLAGS_FOR("XE_HPC_CORE" "PVC")

# Add supported and tested platforms
if(SUPPORT_GEN8)
  if(SUPPORT_BDW)
    ADD_PLATFORM_FOR_CORE_TYPE("SUPPORTED" "GEN8" "BDW")
    if(TESTS_BDW)
      ADD_PLATFORM_FOR_CORE_TYPE("TESTED" "GEN8" "BDW")
    endif()
  endif()
endif()

if(SUPPORT_GEN9)
  if(SUPPORT_SKL)
    ADD_PLATFORM_FOR_CORE_TYPE("SUPPORTED" "GEN9" "SKL")
    if(TESTS_SKL)
      ADD_PLATFORM_FOR_CORE_TYPE("TESTED" "GEN9" "SKL")
    endif()
  endif()

  if(SUPPORT_KBL)
    ADD_PLATFORM_FOR_CORE_TYPE("SUPPORTED" "GEN9" "KBL")
    if(TESTS_KBL)
      ADD_PLATFORM_FOR_CORE_TYPE("TESTED" "GEN9" "KBL")
    endif()
  endif()

  if(SUPPORT_GLK)
    ADD_PLATFORM_FOR_CORE_TYPE("SUPPORTED" "GEN9" "GLK")
    if(TESTS_GLK)
      ADD_PLATFORM_FOR_CORE_TYPE("TESTED" "GEN9" "GLK")
    endif()
  endif()

  if(SUPPORT_CFL)
    ADD_PLATFORM_FOR_CORE_TYPE("SUPPORTED" "GEN9" "CFL")
    if(TESTS_CFL)
      ADD_PLATFORM_FOR_CORE_TYPE("TESTED" "GEN9" "CFL")
    endif()
  endif()

  if(SUPPORT_BXT)
    ADD_PLATFORM_FOR_CORE_TYPE("SUPPORTED" "GEN9" "BXT")
    if(TESTS_BXT)
      ADD_PLATFORM_FOR_CORE_TYPE("TESTED" "GEN9" "BXT")
    endif()
  endif()
endif()

if(SUPPORT_GEN11)
  if(SUPPORT_ICLLP)
    ADD_PLATFORM_FOR_CORE_TYPE("SUPPORTED" "GEN11" "ICLLP")
    if(TESTS_ICLLP)
      ADD_PLATFORM_FOR_CORE_TYPE("TESTED" "GEN11" "ICLLP")
    endif()
  endif()
endif()

if(SUPPORT_GEN12LP)
  if(SUPPORT_TGLLP)
    ADD_PLATFORM_FOR_CORE_TYPE("SUPPORTED" "GEN12LP" "TGLLP")
    if(TESTS_TGLLP)
      ADD_PLATFORM_FOR_CORE_TYPE("TESTED" "GEN12LP" "TGLLP")
    endif()
  endif()

  if(SUPPORT_DG1)
    ADD_PLATFORM_FOR_CORE_TYPE("SUPPORTED" "GEN12LP" "DG1")
    if(TESTS_DG1)
      ADD_PLATFORM_FOR_CORE_TYPE("TESTED" "GEN12LP" "DG1")
    endif()
  endif()

  if(SUPPORT_ADLS)
    ADD_PLATFORM_FOR_CORE_TYPE("SUPPORTED" "GEN12LP" "ADLS")
    if(TESTS_ADLS)
      ADD_PLATFORM_FOR_CORE_TYPE("TESTED" "GEN12LP" "ADLS")
    endif()
  endif()

  if(SUPPORT_ADLP)
    ADD_PLATFORM_FOR_CORE_TYPE("SUPPORTED" "GEN12LP" "ADLP")
    if(TESTS_ADLP)
      ADD_PLATFORM_FOR_CORE_TYPE("TESTED" "GEN12LP" "ADLP")
    endif()
  endif()

  if(SUPPORT_ADLN)
    ADD_PLATFORM_FOR_CORE_TYPE("SUPPORTED" "GEN12LP" "ADLN")
    if(TESTS_ADLN)
      ADD_PLATFORM_FOR_CORE_TYPE("TESTED" "GEN12LP" "ADLN")
    endif()
  endif()
endif()

if(SUPPORT_XE_HPG_CORE)
  if(SUPPORT_DG2)
    ADD_PLATFORM_FOR_CORE_TYPE("SUPPORTED" "XE_HPG_CORE" "DG2")
    if(TESTS_DG2)
      ADD_PLATFORM_FOR_CORE_TYPE("TESTED" "XE_HPG_CORE" "DG2")
    endif()
  endif()

  if(SUPPORT_MTL)
    ADD_PLATFORM_FOR_CORE_TYPE("SUPPORTED" "XE_HPG_CORE" "MTL")
    if(TESTS_MTL)
      ADD_PLATFORM_FOR_CORE_TYPE("TESTED" "XE_HPG_CORE" "MTL")
    endif()
  endif()
endif()

if(SUPPORT_XE_HPC_CORE)
  if(SUPPORT_PVC)
    ADD_PLATFORM_FOR_CORE_TYPE("SUPPORTED" "XE_HPC_CORE" "PVC")
    if(TESTS_PVC)
      ADD_PLATFORM_FOR_CORE_TYPE("TESTED" "XE_HPC_CORE" "PVC")
    endif()
  endif()
endif()
